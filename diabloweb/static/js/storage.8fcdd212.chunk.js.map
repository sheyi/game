{"version":3,"sources":["fs.js","storage.js"],"names":["downloadFile","_callee","store","name","file","blob","url","lnk","D_Projects_diabloweb_diabloweb_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","wrap","_context","prev","next","get","toLowerCase","sent","Blob","type","URL","createObjectURL","document","createElement","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","console","error","concat","stop","downloadSaves","_callee2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context2","undefined","keys","t0","Symbol","iterator","done","value","match","t1","return","finish","readFile","Promise","resolve","reject","reader","FileReader","onload","result","onerror","onabort","readAsArrayBuffer","uploadFile","_callee3","files","data","_context3","Uint8Array","set","abrupt","create_fs","_x7","_create_fs","apply","this","arguments","_callee5","load","_i","_Object$entries","_ref3","_ref2","_context5","IdbKvStore","Map","Object","json","entries","call","length","D_Projects_diabloweb_diabloweb_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","window","DownloadFile","DownloadSaves","update","delete","remove","clear","download","upload","fileUrl","_fileUrl","D_Projects_diabloweb_diabloweb_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","mark","_callee4","_context4","_x8","t2","__webpack_require__","r","__webpack_exports__","_fs__WEBPACK_IMPORTED_MODULE_0__","fs","addEventListener","_ref","source","method","then","postMessage"],"mappings":"qLAgCeA,iFAAf,SAAAC,EAA4BC,EAAOC,GAAnC,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACqBX,EAAMY,IAAIX,EAAKY,eADpC,QACQX,EADRO,EAAAK,OAGUX,EAAO,IAAIY,KAAK,CAACb,GAAO,CAACc,KAAM,wBAC/BZ,EAAMa,IAAIC,gBAAgBf,IAC1BE,EAAMc,SAASC,cAAc,MAC/BC,aAAa,OAAQjB,GACzBC,EAAIgB,aAAa,WAAYpB,GAC7BkB,SAASG,KAAKC,YAAYlB,GAC1BA,EAAImB,QACJL,SAASG,KAAKG,YAAYpB,GAC1BY,IAAIS,gBAAgBtB,IAEpBuB,QAAQC,MAAR,QAAAC,OAAsB5B,EAAtB,oBAbJ,wBAAAQ,EAAAqB,SAAA/B,sCAiBegC,+EAAf,SAAAC,EAA6BhC,GAA7B,IAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApC,EAAA,OAAAK,EAAAC,EAAAC,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAAsB,GAAA,EAAAC,GAAA,EAAAC,OAAAI,EAAAD,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EACyBX,EAAMwC,OAD/B,OAAAF,EAAAG,GAAAC,OAAAC,SAAAP,EAAAE,EAAAxB,KAAAwB,EAAAG,MAAA,UAAAR,GAAAI,EAAAD,EAAAzB,QAAAiC,KAAA,CAAAN,EAAA3B,KAAA,UACWV,EADXoC,EAAAQ,OAEaC,MAAM,WACbhD,EAAaE,EAAOC,GAH1B,QAAAgC,GAAA,EAAAK,EAAA3B,KAAA,gBAAA2B,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAS,GAAAT,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAAS,GAAA,QAAAT,EAAA5B,KAAA,GAAA4B,EAAA5B,KAAA,GAAAuB,GAAA,MAAAG,EAAAY,QAAAZ,EAAAY,SAAA,WAAAV,EAAA5B,KAAA,IAAAwB,EAAA,CAAAI,EAAA3B,KAAA,eAAAwB,EAAA,eAAAG,EAAAW,OAAA,mBAAAX,EAAAW,OAAA,6BAAAX,EAAAR,SAAAE,EAAA,2DAQA,IAAMkB,EAAW,SAAAhD,GAAI,OAAI,IAAIiD,QAAQ,SAACC,EAASC,GAC7C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,kBAAMJ,EAAQE,EAAOG,SACrCH,EAAOI,QAAU,kBAAML,EAAOC,EAAO1B,QACrC0B,EAAOK,QAAU,kBAAMN,KACvBC,EAAOM,kBAAkB1D,eAEZ2D,mFAAf,SAAAC,EAA0B9D,EAAO+D,EAAO7D,GAAxC,IAAA8D,EAAA,OAAA1D,EAAAC,EAAAC,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAxB,GACmByB,WADnBD,EAAAtD,KAAA,EACoCuC,EAAShD,GAD7C,cAAA+D,EAAAlB,GAAAkB,EAAAnD,KACQkD,EADR,IAAAC,EAAAxB,GAAAwB,EAAAlB,IAEEgB,EAAMI,IAAIjE,EAAKD,KAAKY,cAAemD,GAFrCC,EAAAG,OAAA,SAGSpE,EAAMmE,IAAIjE,EAAKD,KAAKY,cAAemD,IAH5C,wBAAAC,EAAAnC,SAAAgC,6BAMe,SAAeO,EAA9BC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAe,SAAAC,EAAyBC,GAAzB,IAAA5E,EAAA+D,EAAAc,EAAAC,EAAAC,EAAAC,EAAA/E,EAAA+D,EAAA,OAAA1D,EAAAC,EAAAC,KAAA,SAAAyE,GAAA,cAAAA,EAAAvE,KAAAuE,EAAAtE,MAAA,cAAAsE,EAAAvE,KAAA,EAELV,EAAQ,IAAIkF,IAAW,aACvBnB,EAAQ,IAAIoB,IAHPN,EAAA,EAAAI,EAAAxC,GAIc2C,OAJdH,EAAAtE,KAAA,EAImCX,EAAMqF,OAJzC,OAAAJ,EAAAlC,GAAAkC,EAAAnE,KAAAgE,EAAAG,EAAAxC,GAIqB6C,QAJrBC,KAAAN,EAAAxC,GAAAwC,EAAAlC,IAAA,YAAA8B,EAAAC,EAAAU,QAAA,CAAAP,EAAAtE,KAAA,SAAAoE,EAAAD,EAAAD,GAAAG,EAAAI,OAAAK,EAAA,EAAAL,CAAAL,EAAA,GAID9E,EAJC+E,EAAA,GAIKhB,EAJLgB,EAAA,GAKTjB,EAAMI,IAAIlE,EAAM+D,GALP,QAAAa,IAAAI,EAAAtE,KAAA,uBAgBX+E,OAAOC,aAAe,SAAA1F,GAAI,OAAIH,EAAaE,EAAOC,IAClDyF,OAAOE,cAAgB,kBAAM7D,EAAc/B,IAjBhCiF,EAAAb,OAAA,SAkBJ,CACLL,QACA8B,OAAQ,SAAC5F,EAAM+D,GAAP,OAAgBhE,EAAMmE,IAAIlE,EAAM+D,IACxC8B,OAAQ,SAAA7F,GAAI,OAAID,EAAM+F,OAAO9F,IAC7B+F,MAAO,kBAAMhG,EAAMgG,SACnBC,SAAU,SAAAhG,GAAI,OAAIH,EAAaE,EAAOC,IACtCiG,OAAQ,SAAAhG,GAAI,OAAI2D,EAAW7D,EAAO+D,EAAO7D,IACzCiG,QAAO,eAAAC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAA9E,EAAAC,EAAA+F,KAAE,SAAAC,EAAMtG,GAAN,IAAAC,EAAAC,EAAA,OAAAG,EAAAC,EAAAC,KAAA,SAAAgG,GAAA,cAAAA,EAAA9F,KAAA8F,EAAA7F,MAAA,cAAA6F,EAAA7F,KAAA,EACYX,EAAMY,IAAIX,EAAKY,eAD3B,YACDX,EADCsG,EAAA1F,MAAA,CAAA0F,EAAA7F,KAAA,eAGCR,EAAO,IAAIY,KAAK,CAACb,GAAO,CAACc,KAAM,wBAHhCwF,EAAApC,OAAA,SAIEnD,IAAIC,gBAAgBf,IAJtB,wBAAAqG,EAAA1E,SAAAyE,MAAF,gBAAAE,GAAA,OAAAL,EAAA5B,MAAAC,KAAAC,YAAA,KAzBE,eAAAO,EAAAvE,KAAA,GAAAuE,EAAAyB,GAAAzB,EAAA,SAkCXS,OAAOC,aAAe,kBAAMhE,QAAQC,MAAM,+BAC1C8D,OAAOE,cAAgB,kBAAMjE,QAAQC,MAAM,+BAnChCqD,EAAAb,OAAA,SAoCJ,CACLL,MAAO,IAAIoB,IACXU,OAAQ,kBAAM1C,QAAQC,WACtB0C,OAAQ,kBAAM3C,QAAQC,WACtB4C,MAAO,kBAAM7C,QAAQC,WACrB6C,SAAU,kBAAM9C,QAAQC,WACxB8C,OAAQ,kBAAM/C,QAAQC,WACtB+C,QAAS,kBAAMhD,QAAQC,aA3Cd,yBAAA6B,EAAAnD,SAAA6C,EAAA,2ECtEfgC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAEMI,EAAK1C,cACXqB,OAAOsB,iBAAiB,UAAW,SAAAC,GAAoB,IAAlBjD,EAAkBiD,EAAlBjD,KAAMkD,EAAYD,EAAZC,OACrB,aAAhBlD,EAAKmD,OACPJ,EAAGK,KAAK,SAAApC,GAAa,IAAXjB,EAAWiB,EAAXjB,MACRmD,EAAOG,YAAY,CAACF,OAAQ,UAAWpD,SAAQ,OAExB,UAAhBC,EAAKmD,QACdJ,EAAGK,KAAK,SAAArC,GAAA,OAAaiB,EAAbjB,EAAEiB","file":"static/js/storage.8fcdd212.chunk.js","sourcesContent":["import IdbKvStore from  'idb-kv-store';\r\n\r\n/*const importStorage = () => new Promise((resolve, reject) => {\r\n  let done = false;\r\n  const frame = document.createElement('iframe');\r\n  window.addEventListener('message', ({data}) => {\r\n    if (data.method === 'storage' && !done) {\r\n      done = true;\r\n      resolve(data.files);\r\n      frame.contentWindow.postMessage({method: 'clear'}, '*');\r\n    }\r\n  });\r\n  frame.addEventListener('load', () => {\r\n    frame.contentWindow.postMessage({method: 'transfer'}, '*');\r\n  });\r\n  frame.addEventListener('error', () => {\r\n    if (!done) {\r\n      done = true;\r\n      resolve(null);\r\n    }\r\n  });\r\n  frame.src = \"https://diablo.rivsoft.net/storage.html\";\r\n  frame.style.display = \"none\";\r\n  document.body.appendChild(frame);\r\n  setTimeout(() => {\r\n    if (!done) {\r\n      done = true;\r\n      resolve(null);\r\n    }\r\n  }, 10000);\r\n});*/\r\n\r\nasync function downloadFile(store, name) {\r\n  const file = await store.get(name.toLowerCase());\r\n  if (file) {\r\n    const blob = new Blob([file], {type: 'binary/octet-stream'});\r\n    const url = URL.createObjectURL(blob);\r\n    const lnk = document.createElement('a');\r\n    lnk.setAttribute('href', url);\r\n    lnk.setAttribute('download', name);\r\n    document.body.appendChild(lnk);\r\n    lnk.click();\r\n    document.body.removeChild(lnk);\r\n    URL.revokeObjectURL(url);\r\n  } else {\r\n    console.error(`File ${name} does not exist`);\r\n  }\r\n}\r\n\r\nasync function downloadSaves(store) {\r\n  for (let name of await store.keys()) {\r\n    if (name.match(/\\.sv$/i)) {\r\n      downloadFile(store, name);\r\n    }\r\n  }\r\n}\r\n\r\nconst readFile = file => new Promise((resolve, reject) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => resolve(reader.result);\r\n  reader.onerror = () => reject(reader.error);\r\n  reader.onabort = () => reject();\r\n  reader.readAsArrayBuffer(file);\r\n});\r\nasync function uploadFile(store, files, file) {\r\n  const data = new Uint8Array(await readFile(file));\r\n  files.set(file.name.toLowerCase(), data);\r\n  return store.set(file.name.toLowerCase(), data);\r\n}\r\n\r\nexport default async function create_fs(load) {\r\n  try {\r\n    const store = new IdbKvStore('diablo_fs');\r\n    const files = new Map();\r\n    for (let [name, data] of Object.entries(await store.json())) {\r\n      files.set(name, data);\r\n    }\r\n    /*if (load) {\r\n      const files = await importStorage();\r\n      if (files) {\r\n        for (let [name, data] of files) {\r\n          files.set(name, data);\r\n          store.set(name, data);\r\n        }\r\n      }\r\n    }*/\r\n    window.DownloadFile = name => downloadFile(store, name);\r\n    window.DownloadSaves = () => downloadSaves(store);\r\n    return {\r\n      files,\r\n      update: (name, data) => store.set(name, data),\r\n      delete: name => store.remove(name),\r\n      clear: () => store.clear(),\r\n      download: name => downloadFile(store, name),\r\n      upload: file => uploadFile(store, files, file),\r\n      fileUrl: async name => {\r\n        const file = await store.get(name.toLowerCase());\r\n        if (file) {\r\n          const blob = new Blob([file], {type: 'binary/octet-stream'});\r\n          return URL.createObjectURL(blob);\r\n        }\r\n      },\r\n    };\r\n  } catch (e) {\r\n    window.DownloadFile = () => console.error('IndexedDB is not supported');\r\n    window.DownloadSaves = () => console.error('IndexedDB is not supported');\r\n    return {\r\n      files: new Map(),\r\n      update: () => Promise.resolve(),\r\n      delete: () => Promise.resolve(),\r\n      clear: () => Promise.resolve(),\r\n      download: () => Promise.resolve(),\r\n      upload: () => Promise.resolve(),\r\n      fileUrl: () => Promise.resolve(),\r\n    };\r\n  }  \r\n}\r\n","import create_fs from './fs';\r\n\r\nconst fs = create_fs();\r\nwindow.addEventListener('message', ({data, source}) => {\r\n  if (data.method === 'transfer') {\r\n    fs.then(({files}) => {\r\n      source.postMessage({method: 'storage', files}, '*');\r\n    });\r\n  } else if (data.method === 'clear') {\r\n    fs.then(({clear}) => clear());\r\n  }\r\n});"],"sourceRoot":""}